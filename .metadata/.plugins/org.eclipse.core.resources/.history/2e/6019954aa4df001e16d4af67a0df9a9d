package com.microservice.user.service.impl;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.microservice.user.entity.Hotel;
import com.microservice.user.entity.Rating;
import com.microservice.user.entity.User;
import com.microservice.user.exception.ResourceNotFoundException;
import com.microservice.user.external.services.HotelService;
import com.microservice.user.repository.UserRepository;
import com.microservice.user.service.UserService;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private HotelService hotelService;
	
	private Logger logger=LoggerFactory.getLogger(UserServiceImpl.class);

	@Override
	public User saveUser(User user) {
		// to generate unique id in string
		String randomeUserId = UUID.randomUUID().toString();
		user.setUserId(randomeUserId);
		return userRepository.save(user);
	}

//	@Override
//	public List<User> getAllUser() {
//		
//		return userRepository.findAll();
//	}
	@Override
	public List<User> getAllUser() {
        List<User> users = userRepository.findAll();
        return users.stream()
                .map(this::getUserWithRatings)
                .collect(Collectors.toList());
    }

    private User getUserWithRatings(User user) {
        String userId = user.getUserId();
        Rating[] ratingsOfUser = restTemplate.getForObject("http://localhost:8083/ratings/users/" + userId, Rating[].class);
        List<Rating> ratingList = Arrays.stream(ratingsOfUser)
                .map(this::getRatingWithHotel)
                .collect(Collectors.toList());
        user.setRatings(ratingList);
        return user;
    }

    private Rating getRatingWithHotel(Rating rating) {
        ResponseEntity<Hotel> forEntity = restTemplate.getForEntity("http://localhost:8082/hotels/" + rating.getHotelId(), Hotel.class);
        Hotel hotel = forEntity.getBody();
        rating.setHotel(hotel);
        logger.info("Response status code: {}", forEntity.getStatusCode());
        return rating;
    }

	@Override
	public User getUser(String userId) {
		//get User from database with the help of user repository
		User user = userRepository.findById(userId).orElseThrow(() -> new ResourceNotFoundException("User with given id is not found: " + userId));
		//fetch rating of the above user from Rating Service
		//http://localhost:8083/ratings/users/dcdfe9d9-3e14-4201-9f0d-d9eac68a4ed6
		Rating[] ratingsOfUser=restTemplate.getForObject("http://RATING-SERVICE/ratings/users/"+userId, Rating[].class);
		logger.info(" {} ",ratingsOfUser);
		List<Rating> ratings = Arrays.stream(ratingsOfUser).toList();
		List<Rating> ratingList = ratings.stream().map(rating->{
			//api call to hotel service to get the hotel
			//http://localhost:8082/hotels/6dac8530-5fae-4ff0-a288-2dcfff1e8a7e
			//Rest
			//ResponseEntity<Hotel> forEntity = restTemplate.getForEntity("http://HOTEL-SERVICE/hotels/"+rating.getHotelId(), Hotel.class);
			Hotel hotel = forEntity.getBody();
			logger.info(" response status code{} ",forEntity.getStatusCode());
			//set the hotel to rating
			rating.setHotel(hotel);
			//return the rating
			return rating;
		}).collect(Collectors.toList());
		
		user.setRatings(ratingList);
		return user;
				
	}

	@Override
	public String deleteUserId(String userId) {
		// TODO Auto-generated method stub
		userRepository.deleteById(userId);
		return "Deleted Successfully";
	}

//	@Override
//	public User updateUserById(String userId) {
//		// TODO Auto-generated method stub
//		Optional<User> byId = userRepository.findById(userId);
//		return userRepository.saveAll(byId);
//	}

}